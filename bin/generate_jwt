#!/usr/bin/env elixir

Mix.install([
  {:joken, "~> 2.6"},
  {:jason, "~> 1.4"}
])

defmodule JWTGenerator do
  @moduledoc """
  CLI tool for generating JWT tokens for MCP broker clients.
  """

  def main(args) do
    case args do
      [subject, tags_string] ->
        tags = String.split(tags_string, ",") |> Enum.map(&String.trim/1)
        generate_token(subject, tags)
      _ ->
        show_usage()
    end
  end

  defp generate_token(subject, tags) do
    # Use the same configuration as the main module
    private_key_path = Path.join([__DIR__, "..", "config", "jwt_keys", "private_key.pem"])
    
    case File.read(private_key_path) do
      {:ok, private_key} ->
        signer = Joken.Signer.create("RS256", %{"pem" => private_key})
        
        claims = %{
          "iss" => "mcp-broker",
          "aud" => "mcp-broker", 
          "sub" => subject,
          "allowed_tags" => tags,
          "exp" => DateTime.utc_now() |> DateTime.add(30 * 24 * 60 * 60) |> DateTime.to_unix(),
          "iat" => DateTime.utc_now() |> DateTime.to_unix()
        }

        case Joken.encode_and_sign(claims, signer) do
          {:ok, token, _verified_claims} ->
            IO.puts("Generated JWT token for #{subject}:")
            IO.puts("")
            IO.puts("Subject: #{subject}")
            IO.puts("Allowed Tags: #{Enum.join(tags, ", ")}")
            IO.puts("Expires: #{DateTime.from_unix!(Map.get(claims, "exp")) |> DateTime.to_iso8601()}")
            IO.puts("")
            IO.puts("Token:")
            IO.puts(token)
            IO.puts("")
            IO.puts("You can use this token by setting the MCP_CLIENT_JWT environment variable:")
            IO.puts("export MCP_CLIENT_JWT=\"#{token}\"")
            
          {:error, reason} ->
            IO.puts("Error generating token: #{inspect(reason)}")
            System.halt(1)
        end
        
      {:error, reason} ->
        IO.puts("Error reading private key: #{reason}")
        IO.puts("Make sure you have generated the RSA key pair with:")
        IO.puts("openssl genrsa -out config/jwt_keys/private_key.pem 2048")
        System.halt(1)
    end
  end

  defp show_usage do
    IO.puts("""
    Usage: #{Path.basename(__ENV__.file)} SUBJECT TAGS
    
    Generates a JWT token for MCP broker client authentication.
    
    Arguments:
      SUBJECT     Client identifier (e.g., "claude-code", "cursor", "web-app")
      TAGS        Comma-separated list of allowed server tags (e.g., "api,public,coding")
    
    Examples:
      #{Path.basename(__ENV__.file)} claude-code "api,public,coding"
      #{Path.basename(__ENV__.file)} cursor "api,coding"
      #{Path.basename(__ENV__.file)} web-client "public"
    
    The generated token will be valid for 30 days and can be used by setting the
    MCP_CLIENT_JWT environment variable when starting the client.
    """)
    System.halt(1)
  end
end

JWTGenerator.main(System.argv())